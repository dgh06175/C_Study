#include <stdio.h>
#include <stdlib.h>		// 난수 생성기 함수
#include <time.h>		// time() 함수

void generate_random(int array[], int size);	// 난수 생성 함수 선언
void print_array(char *str, int array[], int size);	// 배열 출력 힘수 선언
void bubble_sort(int array[], int size);	// 함수 선언 추가
void bubble(int array[], int last);
void swap(int *xp, int *yp);

void main(void)
{
	int *data, size;
	srand(time(NULL));			// 난수 초기화
	printf("배열의 크기를 입력하세요: ");	// 배열의 크기 입력
	scanf_s("%d", &size);
	data = (int *)malloc(sizeof(int)*size);	// 배열 동적 할당

	generate_random(data, size);		// 난수 생성
	print_array("원본: ", data, size);		// 원본 데이터 출력
											// 버블정렬
	bubble_sort(data, size);		// main()에 함수 호출 추가
	print_array("정렬: ", data, size);		// 정렬 데이터 출력
											// 파일에 저장
	free(data);			// 기억장치 해제
}
void generate_random(int array[], int size)
{
	int n;
	for (n = 0; n<size; n++)
		array[n] = (rand() % 1000) + 1;
}

void print_array(char *str, int array[], int size)
{
	int n;
	printf("%s %d\n", str, size);
	for (n = 0; n<size; n++)
	{
		printf("%5d", array[n]);
		if ((n + 1) % 10 == 0)
			printf("\n");
	}
	printf("\n");
}

void bubble_sort(int array[], int size)	// 함수 구현
{
	int n;
	for (n = 0; n<size - 1; n++)		// array[0] ~ array[size–n–1] 중에서
		bubble(array, size - n - 1);	// 가장 큰 값을 array[size-n-1]으로 보낸다.
}

void bubble(int array[], int last)	// 함수 구현
{
	int m;
	for (m = 0; m<last; m++)
		if (array[m] > array[m + 1])		// 배열의 뒤 원소가 더 크면
			swap(&array[m], &array[m + 1]);	// 교환한다.
}

void swap(int *xp, int *yp)		// 파라미터를 통하여 값을 리턴
{				// 포인터를 받는다.
	int temp;
	temp = *xp;
	*xp = *yp;
	*yp = temp;
}

----------------------------------------------------
void bubble_sort(int array[], int size)
{
    int n, m;
    for (n=0; n<size-1; n++)	
        for (m=0; m<size-n-1; m++)	//for (m=0; m<last; m++)
            if (array[m] > array[m+1])
                swap(&array[m], &array[m+1]);
}
