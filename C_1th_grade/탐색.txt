#include <stdio.h>
#include <stdlib.h>		// malloc()을 선언하는 헤더 파일 추가
#pragma warning(disable:4996)
int read_data2(int **dparray);
int linear_search(int array[], int size, int key);
void print_array(FILE *fp, char *str, int array[], int size);
void main(void)
{
	int *data = NULL, size = 0;		// 변수 수정 및 초기화
	int index, key = 1;
	char temp[20];		// 파일 읽기에 필요한 변수
	int n;
	char *fpath = "sorted.txt";
	FILE *fp = fopen(fpath, "r");		// 파일 포인터 선언 및 파일 열기
	if (fp != NULL)		// 파일을 성공적으로 열었다면
	{
		fscanf(fp, "%s %d", temp, &size);	// “원본:”과 데이터 크기를 읽는다.
		if (size != 0)
		{
			data = (int *)malloc(sizeof(int)*size);	// 배열을 동적으로 할당한다.
			for (n = 0; n<size; n++)		// 데이터를 읽는다.
				fscanf(fp, "%d", &data[n]);
		}
		fclose(fp);			// 파일을 닫는다.
	}
	else
		printf("파일이 존재하지 않습니다.");
	print_array(stdout,"원본: ", data, size);
	size = read_data2(&data);
	while (key > 0)
	{
		printf("검색할 수를 입력하세요: ");		// 사용자의 입력을 받는다.
		scanf("%d", &key);
		if (key > 0)			// 리스트 30의 라인 17을 교체한다.
		{
			index = linear_search(data, size, key);	// 탐색을 수행한다.
			if (index != -1)				// 발견하였다면
				printf("데이터가 %d 번째에 있습니다.\n", index + 1);
			else					// 발견하지 못했다면
				printf("데이터가 파일에 없습니다.\n");
		}
	}
	printf("프로그램을 종료합니다.\n\n");
		if (data != NULL)		// 기억장소를 동적으로 할당하므로
			free(data);			// 해제한다.
}
int read_data2(int **parray)		// read_data2() 구현
{
	char temp[20];
	int *array = NULL, size = 0, n;
	char *fpath = "sorted.txt";
	FILE *fp = fopen(fpath, "r");
	if (fp != NULL)
	{
		fscanf(fp, "%s %d", temp, &size);		// 크기를 결정한다.
		if (size != 0)
		{
			array = (int *)malloc(sizeof(int)*size);	// 배열을 할당한다.
			for (n = 0; n<size; n++)
				fscanf(fp, "%d", &array[n]);		// 배열에 데이터를 읽는다.
		}
		fclose(fp);
	}
	else
		printf("파일이 존재하지 않습니다.\n");

	*parray = array;			// 간접적으로 포인터를 전달한다.
	return size;				// 크기를 리턴한다.
}
int linear_search(int array[], int size, int key)	// 선형 탐색 함수 구현
{
	int n;
	for (n = 0; n<size; n++)		// 배열의 처음부터 끝까지
	{
		if (key == array[n])		// 찾았으면
			return n;		// 배열의 인덱스를 리턴한다.
		if (key < array[n])		// 배열의 원소가 키 보다 크면
			break;		// 탐색을 중단한다.
	}
	return -1;			// 찾지 못했으므로, -1을 리턴한다.
}
void print_array(FILE *fp, char *str, int array[], int size)	// 파라미터 FILE * 추가
{
	int n;
	fprintf(fp, "%s %d\n", str, size);		// printf(…)를 fprintf(fp, …)로 수정한다.
	for (n = 0; n<size; n++)
	{
		fprintf(fp, "%5d", array[n]);		// printf(…)를 fprintf(fp, …)로 수정한다.
		if ((n + 1) % 10 == 0)
			fprintf(fp, "\n");		// printf(…)를 fprintf(fp, …)로 수정한다.
	}
	fprintf(fp, "\n");			// printf(…)를 fprintf(fp, …)로 수정한다.
}