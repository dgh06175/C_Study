#include <stdio.h>
#include <stdlib.h>		// 난수 생성기 함수
#include <time.h>		// time() 함수
#pragma warning(disable:4996)

void generate_random(int array[], int size);	// 난수 생성 함수 선언
void print_array(FILE *fp, char *str, int array[], int size);   	// 파라미터 FILE *를 추가한다
void bubble_sort(int array[], int size);	// 함수 선언 추가
void bubble(int array[], int last);
void swap(int *xp, int *yp);
void save_data(int array[], int size);		// 파일 저장함수 선언을 추가한다.

void main(void)
{
	int *data, size;
	srand(time(NULL));			// 난수 초기화
	printf("배열의 크기를 입력하세요: ");	// 배열의 크기 입력
	scanf_s("%d", &size);
	data = (int *)malloc(sizeof(int)*size);	// 배열 동적 할당

	generate_random(data, size);		// 난수 생성
	print_array(stdout, "원본: ", data, size);		// 표준출력장치를 전달한다.
											// 버블정렬
	bubble_sort(data, size);		// main()에 함수 호출 추가
	print_array(stdout, "정렬: ", data, size);		// 표준출력장치를 전달한다.
	save_data(data, size);			// 파일 저장 함수를 호출한다.						// 파일에 저장
	free(data);			// 기억장치 해제
}
void generate_random(int array[], int size)
{
	int n;
	for (n = 0; n<size; n++)
		array[n] = (rand() % 1000) + 1;
}

void print_array(FILE *fp, char *str, int array[], int size)	// 파라미터 FILE * 추가
{
	int n;
	fprintf(fp, "%s %d\n", str, size);		// printf(…)를 fprintf(fp, …)로 수정한다.
	for (n = 0; n<size; n++)
	{
		fprintf(fp, "%5d", array[n]);		// printf(…)를 fprintf(fp, …)로 수정한다.
		if ((n + 1) % 10 == 0)
			fprintf(fp, "\n");		// printf(…)를 fprintf(fp, …)로 수정한다.
	}
	fprintf(fp, "\n");			// printf(…)를 fprintf(fp, …)로 수정한다.
}

void bubble_sort(int array[], int size)	// 함수 구현
{
	int n;
	for (n = 0; n<size - 1; n++)		// array[0] ~ array[size–n–1] 중에서
		bubble(array, size - n - 1);	// 가장 큰 값을 array[size-n-1]으로 보낸다.
}

void bubble(int array[], int last)	// 함수 구현
{
	int m;
	for (m = 0; m<last; m++)
		if (array[m] > array[m + 1])		// 배열의 뒤 원소가 더 크면
			swap(&array[m], &array[m + 1]);	// 교환한다.
}

void swap(int *xp, int *yp)		// 파라미터를 통하여 값을 리턴
{				// 포인터를 받는다.
	int temp;
	temp = *xp;
	*xp = *yp;
	*yp = temp;
}
void save_data(int array[], int size)
{
	FILE *fp;			// 파일 포인터를 선언한다.
	fp = fopen("sorted.txt", "w");	// 텍스트 파일을 쓰기 모드로 연다.
	if (fp != NULL)		// 파일 열기에 성공하였다면,
	{
		print_array(fp, "정렬: ", array, size);	// 파일을 사용하고
		fclose(fp);			// 파일을 닫는다.
	}
}